{"ast":null,"code":"import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport Backend from \"i18next-http-backend\";\nimport LanguageDetector from \"i18next-browser-languagedetector\";\ni18n // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\n// learn more: https://github.com/i18next/i18next-http-backend\n.use(Backend) // detect user language\n// learn more: https://github.com/i18next/i18next-browser-languageDetector\n.use(LanguageDetector) // pass the i18n instance to react-i18next.\n.use(initReactI18next) // init i18next\n// for all options read: https://www.i18next.com/overview/configuration-options\n.init({\n  lng: \"en\",\n  // lng: document.querySelector(\"html\").lang,\n  backend: {\n    /* translation file path */\n    loadPath: \"/assets/i18n/{{ns}}/{{lng}}.json\"\n  },\n  fallbackLng: \"en\",\n  // detection: {\n  //   order: [\n  //     \"htmlTag\",\n  //     \"cookie\",\n  //     \"localStorage\",\n  //     \"navigator\",\n  //     \"path\",\n  //     \"subdomain\",\n  //   ],\n  // },\n  debug: true,\n\n  /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\n  ns: [\"translations\"],\n  defaultNS: \"translations\",\n  keySeparator: false,\n  interpolation: {\n    escapeValue: false,\n    formatSeparator: \",\"\n  },\n  react: {\n    useSuspense: false\n  }\n});\nexport default i18n;","map":{"version":3,"sources":["D:/ArchiLux-React/ArchiLux-React/src/i18n.js"],"names":["i18n","initReactI18next","Backend","LanguageDetector","use","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","interpolation","escapeValue","formatSeparator","react","useSuspense"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AAEA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,gBAAP,MAA6B,kCAA7B;AAEAH,IAAI,CACF;AACA;AAFE,CAGDI,GAHH,CAGOF,OAHP,EAIE;AACA;AALF,CAMGE,GANH,CAMOD,gBANP,EAOE;AAPF,CAQGC,GARH,CAQOH,gBARP,EASE;AACA;AAVF,CAWGI,IAXH,CAWQ;AACJC,EAAAA,GAAG,EAAE,IADD;AAEJ;AACAC,EAAAA,OAAO,EAAE;AACP;AACAC,IAAAA,QAAQ,EAAE;AAFH,GAHL;AAOJC,EAAAA,WAAW,EAAE,IAPT;AAQJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,KAAK,EAAE,IAlBH;;AAmBJ;AACAC,EAAAA,EAAE,EAAE,CAAC,cAAD,CApBA;AAqBJC,EAAAA,SAAS,EAAE,cArBP;AAsBJC,EAAAA,YAAY,EAAE,KAtBV;AAuBJC,EAAAA,aAAa,EAAE;AACbC,IAAAA,WAAW,EAAE,KADA;AAEbC,IAAAA,eAAe,EAAE;AAFJ,GAvBX;AA2BJC,EAAAA,KAAK,EAAE;AACLC,IAAAA,WAAW,EAAE;AADR;AA3BH,CAXR;AA2CA,eAAelB,IAAf","sourcesContent":["import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport Backend from \"i18next-http-backend\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\n\r\ni18n\r\n  // load translation using http -> see /public/locales (i.e. https://github.com/i18next/react-i18next/tree/master/example/react/public/locales)\r\n  // learn more: https://github.com/i18next/i18next-http-backend\r\n  .use(Backend)\r\n  // detect user language\r\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\r\n  .use(LanguageDetector)\r\n  // pass the i18n instance to react-i18next.\r\n  .use(initReactI18next)\r\n  // init i18next\r\n  // for all options read: https://www.i18next.com/overview/configuration-options\r\n  .init({\r\n    lng: \"en\",\r\n    // lng: document.querySelector(\"html\").lang,\r\n    backend: {\r\n      /* translation file path */\r\n      loadPath: \"/assets/i18n/{{ns}}/{{lng}}.json\",\r\n    },\r\n    fallbackLng: \"en\",\r\n    // detection: {\r\n    //   order: [\r\n    //     \"htmlTag\",\r\n    //     \"cookie\",\r\n    //     \"localStorage\",\r\n    //     \"navigator\",\r\n    //     \"path\",\r\n    //     \"subdomain\",\r\n    //   ],\r\n    // },\r\n    debug: true,\r\n    /* can have multiple namespace, in case you want to divide a huge translation into smaller pieces and load them on demand */\r\n    ns: [\"translations\"],\r\n    defaultNS: \"translations\",\r\n    keySeparator: false,\r\n    interpolation: {\r\n      escapeValue: false,\r\n      formatSeparator: \",\",\r\n    },\r\n    react: {\r\n      useSuspense: false\r\n    },\r\n  });\r\n\r\nexport default i18n;\r\n"]},"metadata":{},"sourceType":"module"}